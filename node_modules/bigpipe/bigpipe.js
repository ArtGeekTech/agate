var http = require("http");
var fs = require("fs");
function heredoc(fn) {
    return fn.toString().replace(/^[^\/]+\/\*!?\s?/, '').replace(/\*\/[^\/]+$/, '')
}
function format(str, object) {
    var array = Array.prototype.slice.call(arguments, 1);
    return str.replace(/\\?\#{([^{}]+)\}/gm, function (match, name) {
        if (match.charAt(0) == '\\')
            return match.slice(1);
        var index = Number(name)
        if (index >= 0)
            return array[index];
        if (object && object[name] !== void 0)
            return  object[name];
        return  '';
    });
}
//这个页面一共要分割成多少(n)块
function BigPipe(n) {
    this.n = n
    var Readable = require("stream").Readable
    var stream = new Readable()
    stream._read = function () {
    }
    this.stream = stream
}

function ClientBigPipe() {
    var ids = []
    function getPagelet(node) {
        var fragment = document.createDocumentFragment()
        var id = node.id
        var nodes = [node]
        while (node = node.previousSibling) {
            nodes.unshift(node)
            if (node.nodeType === 8 && trim(node.nodeValue) === id) {
                break
            }
        }
        for (var i = 0; node = nodes[i++]; ) {
            fragment.appendChild(node)
        }
        fragment.removeChild(fragment.firstChild)
        fragment.removeChild(fragment.lastChild)
        return fragment
    }
    function trim(str) {
        return str.replace(/^\s+|\s+$/g, '');
    }
    return {
        pin: function (id) {
            ids.push(id)
            for (var i = ids.length, cur; cur = ids[--i]; ) {
                var placehold = document.getElementById("_" + cur)
                if (placehold) {
                    var pin = document.getElementById(cur)
                    var pagelet = getPagelet(pin)
                    placehold.parentNode.replaceChild(pagelet, placehold)
                    ids.splice(i, 1)
                }
            }
        }
    }
}
//输出第一块(str一般为layout)
BigPipe.heredoc = heredoc
BigPipe.prototype.begin = function (str) {
    str = str.replace(/<\/body>\s*<\/html>/, "")
    var id = "_id" + Date.now()
    var chunk = format(heredoc(function () {/*
     #{str}
     <script id="#{id}">window.BigPipe = new #{bigpipe}; 
     (function(){ 
     var el = document.getElementById("#{id}")
     el.parentNode.removeChild(el)
     })();
     </script>
     */
    }), {id: id, str: str, bigpipe: ClientBigPipe.toString()})
    this.stream.push(chunk)
}

BigPipe.prototype.end = function (str) {
    this.tail = str || "<\/body><\/html>"
}

BigPipe.prototype.finish = function () {
    this.stream.push(this.tail)
    this.stream.push(null)
}

BigPipe.prototype.flush = function (path, id) {
    var b = this
    fs.readFile(path, "utf8", function (a, str) {
        b.push(str, id)
    })
}

BigPipe.prototype.push = function (str, id) {
    id = "pagelet-" + id
    var chunk = format(heredoc(function () {/*
     <!--#{id}-->#{str}
     <script id="#{id}">BigPipe.pin("#{id}")</script>
     */
    }), {id: id, str: str})
    this.stream.push(chunk)
    if (--this.n === 0) {
        this.finish()
    }
    return id
}
module.exports = BigPipe